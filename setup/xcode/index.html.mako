<%inherit file="/_templates/markdown.mako" />

Xcodeセットアップガイド
==================

ステップ1 -- Xcodeのインストール<br/>
ステップ2 -- openFrameworksを使う

Xcodeの癖：メインプロジェクトフォルダーの名前でのスペースの使用<br/>
Xcodeの癖：新規ファイルの追加<br/>
Xcode 4.0の注意と、OSX 10.7.2について

**ステップ1：Xcode3以上のバージョンをダウンロードしてインストール**

XcodeはApple社製のOSXベースのフリーの統合開発環境(IDE)です。Appleの開発者として登録していれば、[デベロッパーセンター][0]からダウンロードできます。[デベロッパー登録](https://developer.apple.com/jp/programs/register/)は無料で、さほど大変でもありません。

![adcLogin](adcLogin.jpg)  

登録したアカウントでログインして、[Member Center](https://developer.apple.com/membercenter/index.action)のリンクを選びます。

![adcDeveloperTools](adcDeveloperTools.jpg)  

最新のバージョンのXcode3、またはXcode4をダウンロードします。

![adcDownload](adcDownload.jpg)  

ダウンロードが完了すると、インストーラーのディスクイメージがマウントされ、XcodeToolsのパッケージが起動されます。カスタマイズのオプションが出てくるまで、クリックしていきます。

これはインストールするかしないかを選択するところで、もしあまりディスクスペースの余裕がなくて、1.3GBもある開発者ドキュメントをスキップしたいのであれあ、下記で図示した部分をクリックします。

また、OS X 10.5や10.6などの古いバージョンのサポートをするかどうかを示す全てのボックスをチェックしておくことをお勧めします。

![xcodeCustomize](xcodeCustomize.jpg)  

インストーラーがインストールを開始します。

![xcodeInstalling](xcodeInstalling.jpg)  

デベロッパーツールのインストーラーは、ハードドライブのroot(一番上位の階層)にある_Developer_フォルダにインストールします。Xcodeのアプリケーションは、_/Developer/Applications/Xcode.app_に配置されます。

![xcodeLocation](xcodeLocation.jpg)  

コンピュータにXcodeがうまくインストールできたら、いよいよopenFrameworksのサンプルをチェックします。


**ステップ2：openFrameworksを使う**

このWebサイトの[download][1]のセクションから、サンプルをダウンロードします。ダウンロードして展開したら、ハードドライブの適切な場所にフォルダを配置します。展開されたフォルダー内のコンテンツは下記のようになります。

![ofFolderStructure](ofFolderStructure.jpg)  

サンプルは_"apps"_フォルダに格納されています。サンプルのそれぞれのフォルダの中に、_"graphicsExample.xcodeproj"_ のようにXcodeのプロジェクトファイルがあります。このファイルをXcodeで開きます。

Xcodeでサンプルを開くと、左側のコラムにファイルのリストが、右側のコラムには現在選択しているファイル(この画像の場合は_"testApp.cpp"_)が表示されます。

![xcodeLeftSide](xcodeLeftSide.jpg)  

おそらく最初にやってみたいことは、プログラムをコンパイルして実際に動くかどうかアプリケーションを実行することでしょう。Xcodeのウィンドウの一番上に_"Build and Go"_ というボタンがあります。このボタンは、サンプルをコンパイルして、もしエラーがない限り、アプリを起動します。もし最初のコンパイルでエラーが出る場合は、Buildメニューから、"Clean All Targets"をを選択して、再度コンパイルし直してください。

![xcodeButtons](xcodeButtons.jpg)  

![ofTypeWindow](ofTypeWindow.jpg)  

_起動したアプリケーションを終了するには、「Esc(エスケープ)」キーを押します。_


**注：警告とエラー**

アプリケーションがコンパイルされている間は、Xcodeウィンドウの右下のコーナーに**プログレスメーター**と呼ばれる小さな円が表示されます。これは、ファイルのコンパイル状況をパーセントで表示します。

黄色い三角形とそれに続く数字は、コンパイラーからの**警告メッセージ**の数を示しています。大抵の場合は、警告メッセージは無視して構いません。しかし、もし警告の内容を読みたいのであれば、三角形をクリックするとXcodeが警告のリストを別ウィンドウで表示します。

![xcodeCompileProgress](xcodeCompileProgress.jpg)  

もしコンパイラーがコードの中に**エラー**を発見した場合や何らかの喜ばしくないことがある場合、コンパイルは失敗し、Xcodeのウィンドウの右下に何らかの表示がされます。

![xcodeError](xcodeError.jpg)  

警告メッセージと同じように、**view the errors**をみるために赤い丸をクリックすると、Xcodeはエラーのリストとどこでエラーが起きたのかわかるように**コードの中をハイライト**して新しいウィンドウで表示します。

![xcodeErrorShow](xcodeErrorShow.jpg)  

**エラーメッセージは常に意味をなすわけではない**ということを心に留めてください。しかし、多くの場合、エラーがどこで発生したのかを知るだけで、間違いをはっきりさせるには十分です。

上のコードでは、ハイライトされた行から、_"frabk.tff"_(ロードしたいフォントの名前)と_32_(フォントのサイズ)の間にコンマをつけ忘れたことを簡単に発見できます。

もしコンマを挿入すれば、エラーは無くなりアプリケーションはコンパイルされて起動するでしょう。

![ofGraphicsWindow](ofGraphicsWindow.jpg)  

**注：実行ログ**

Xcodeプロジェクトがアプリケーションを起動するとき、_"実行ログ"_と呼ばれるウィンドウが背後で実行されます。これは、実行中に**アプリケーションからのフィードバック**を知らせるためのコンソールです。

アプリケーションが起動したとき、実行ログはまず最初に以下の出力をします。

**\[Session started at 2007-02-25 15:34:07 +0100.\]**

アプリケーションを閉じると、以下のような文字が表示されるでしょう。

**openFrameworks has exited with status 0\.**

実行ログの便利な点は、**アプリケーションを実行しながら**_"ofLog"_コマンドを使用して出力ができるところです。また、もしopenFrameworksに関連するメッセージやエラーがあれば、実行ログに出力されるでしょう。

![RunLog](RunLog.jpg)  

**注：アプリケーションの場所**

Xcodeでコンパイルして実行するアプリケーションは、それぞれのプロジェクトのディレクトリ内の_"bin/"_フォルダに入っています。ダブクリックすればいつでも**アプリケーションを直接起動**することが可能です。実行ログからの出力を見ることができないことを除けば、Xcodeから起動することと違いはありません。

![buildLocation](buildLocation.jpg)  


**Xcode -- バグと癖**

**メインプロジェクトフォルダでのスペースの使用** いくつかの理由により、Xcodeは、もしメインのプロジェクトフォルダ(_"apps"_や_"libs"_を含めて)名前にスペースがあると、おかしなことになります。

libsフォルダの中から正しいライブラリを見付けることができず、**リンクエラー**になってしまいます。

![badFolder](badFolder.jpg)  

上記のフォルダ名では、'my'と'apps'の間にスペースがあるため、同じような問題が起こります。スペースをダッシュ「-」を使用したり、下記のようにそのまま繋ぎあわせることで、全てはうまくいきます。

![goodFolder](goodFolder.jpg)  

**ファイルをプロジェクトに追加：相対パスと絶対パス** ソースコードのファイルやライブラリをプロジェクトに追加する際、Xcodeはファイルへのパスを、相対パスにするか絶対パスかを訊いてきます。

![addDialogRelative](addDialogRelative.jpg)  

メインの**openFrameworksのフォルダ**内の**全てのファイル**とサブフォルダに関するルールは、**_"relative to project (プロジェクトに相対的に)"_を選択**しなければなりません。もし**絶対パス**を選択してしまうと、openFrameworksのフォルダを移動したり、他のコンピュータに持っていった際に、**Xcodeがおかしくなります**。なぜなら、パスによってリストアップしたファイルが存在しなくなってしまうからです。

例えば、_"/User/yourname/Documents/openFrameworksProjects"_ といったパスの指定は、openFrameworksが特定のフォルダに配置されている時しか**正しく動作しません**。明らかに、これは**良いことではありません**。

**初期設定でのパス**は、**絶対パスになっていることが普通**です。ですので、追加する前に_"relative to project"_ に**変更する**ように気をつけてください。

**絶対パス**にする**唯一**のファイル群は、ほとんど追加する必要は無いですが、**System Frameworks**です。


**Xcode 4.0 の注意**

**Xcode4のプロジェクトでの典型的なレイアウトです。**

![xc4](xc4.png)  

Xcode 4のインターフェイスは一からデザインし直されました。いくつかの重要な違いがあります。

**サイドバー・ビューモード**

最初にopenFrameworksのプロジェクを開いた時は、サイドバーの中にファイルが表示されていないことに気付くでしょう。
サイドバーの上にあるフォルダアイコンをクリックすることで、いままで通りのファイル表示になります (サイドバーの矢印をクリックしてリストを展開する必要があります)。

![xc4sideBarTop](xc4sideBarTop.png)  

![xc4sidebarFileSelected](xc4sidebarFileSelected.png)  


**実行ボタン(Build button)**

Xcode 4では、"Build"ボタンと"Build and Run"ボタンは、"Run"ボタンに変更されました。アプリケーションをコンパイルして実行するには、"Run"ボタンを押します。

![xc4Run](xc4Run.png)  


**正しいターゲットの選択**

あなたは、また、実行してもサンプルが動かないことに気付いたかもしれません。

これは、アクティブ・ターゲットにサンプルのプロジェクトではなくopenFrameworksのライブラリが選択されているからです。これを修正するには、'Scheme'のドロップダウンメニューから、サンプルのプロジェクトを選択するようにします。

![xc4changeScheme](xc4changeScheme.png)  


**デバッグモードからリリースモードへ変更する**

アプリケーションの開発が終わったら、リリースバージョンを生成したくなるでしょう。Xcode 3では、デバッグからリリースへビルドの切替えをするのは簡単でした。

Xcode 4では初期状態ではデバッグしか使用できません。リリースへ切替えるには、Schemeメニューから'Edit Schemes'を選択します。サイドバーからサンプルのアプリケーションを選択し、ビルド設定をReleaseに変更します。

![xc4editSchemes1](xc4editSchemes1.png)  

![xc4editSchemes2](xc4editSchemes2.png)  


**エラー**

Xcode 4のコンパイラーは、コードをタイピングしながら、ビルドする前でも赤く表示されたエラーをみることができます。

これは実際とても手軽で、すぐに間違いの場所に気付くことができます。また、画面の右下にあったエラーの表示は、パネルの上部に移動しました。

![xc4errors](xc4errors.png)  


**OS X 10.6をターゲットにする / MacSetRectエラー**

OS X 10.7とXcode 4.0でQuickTimeのMacSetRectエラーになってしまうとしたら、プロジェクトが10.7 SKDに設定されているせいです。QuickTime 7の依存関係のせいで、現在のopenFrameworksでは10.7のSDKではビルドできません。

[このブログにポストされた方法][2]に従って、プロジェクトを10.6 SDKに戻しましょう。

* プロジェクトのSchemeから、openFrameworksのSchemeに切り替えます。

* サイドバーにある"project"をクリックして、設定画面を表示します。

* Base SDKを10.6に変更します。

* 同じ操作を、ビルドターゲットについても繰り返します。

* サイドバーのopenFrameworksフォルダをクリックします

* "project"を選択して、設定画面を表示します。

* 先程と同様に、Base SDKを10.6に切り替えます。

* 同じ操作を、ビルドターゲットについても繰り返します。


**OS X 10.7.2 oFの課題**

OSX 10.7.2では、いくつかの課題があります。現在、次期リリースで修正されるよう作業中です。
それまでは、[フォーラムに投稿されたTips][3]をチェックしてください。

[0]: http://connect.apple.com
[1]: http://www.openframeworks.jp/download
[2]: http://blog.davidpaulrosser.co.uk/2011/08/getting-openframeworks-0-07-compiling-with-osx-10-7/
[3]: http://forum.openframeworks.cc/index.php/topic,7621.0.html
